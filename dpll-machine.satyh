@require: base/fn
@require: base/list-ext
@require: azmath/azmath
@require: uline/uline
@import: colors
@import: utils

module DPLL : sig
  type valuation
  type literal
  val from-lit : literal -> math
  val lit : int -> literal
  val pos : int -> literal
  val neg : int -> literal
  val tt : int -> literal
  val ff : int -> literal
  val xx : int -> literal
  val dd : int -> literal 
  type clause
  val from-clause: literal list -> math
  val from-cnf: (literal list) list -> math
  direct \cnf: [(literal list) list] math-cmd
  val pretty-cnf: (literal list) list -> math
  direct \pretty-cnf: [(literal list) list] math-cmd
  type rule
  val unit-prop : int -> rule
  val dec : int -> rule
  val bj : rule
  val bt : rule
  val rule : math -> rule
  type row
  val from-stack : literal list -> math
  type derivation
  val render-derivs: (literal list) list -> (rule * (literal list) list * literal list) list -> inline-text
  direct \derive: [(literal list) list; (rule * (literal list) list * literal list) list] inline-cmd
  direct +derive: [(literal list) list; (rule * (literal list) list * literal list) list] block-cmd
end = struct
  type rule  =
    | UnitProp of int
    | Decide of int
    | Backtrack
    | Backjump
    | Escape of math
  type valuation = 
    | Neutral | True | False | Conflict | Deciding
  type literal = 
    | Lit of valuation * int
  type stack = literal list
  type clause = literal list

  type cnf = clause list
  type row = rule option * cnf * stack
  type derivation = row list
  let dec i = Decide i
  let unit-prop i = UnitProp i
  let bt = Backtrack
  let bj = Backjump
  let pos l = Lit (Neutral, l)
  let neg l = Lit (Neutral, -l)
  let lit l = Lit (Neutral, l)
  let tt l = Lit (True, l)
  let ff l = Lit (False, l)
  let xx l = Lit (Conflict, l)
  let dd l = Lit (Deciding, l)
  let-math \widebar it =
    text-in-math
        MathOrd
        (fun ctx -> (
            let it = embed-math ctx ${#it} in
            let (width, height, depth) = get-natural-metrics it in
            let offset = 2pt in
            let dx = (width -' width *' 0.75) *' 0.5 in
            let color = get-text-color ctx in
            inline-graphics
                width
                (height +' offset)
                depth
                (fun (x, y) -> [
                  draw-text (x, y) it;
                  stroke
                  0.5pt
                  (get-text-color ctx)
                  (
                      start-path (x +' dx, y +' height +' offset)
                      |> line-to (x +' width -' dx, y +' height +' offset)
                      |> close-with-line
                  )
                ])
        ))
  let from-plain-lit i = 
        let abs-i = if i < 0 then -i else i
        in let sign x = if i < 0 then ${\widebar{#x}} else x
        in sign (text-in-math MathOrd (fun ctx -> read-inline ctx ((embed-string (arabic abs-i)))))
  let-inline ctx \skip sz = inline-skip sz
  let math-skip sz = text-in-math MathPunct (fun ctx -> inline-skip sz)
  let-math \math-skip sz = math-skip sz
  let from-lit (Lit (s, i)) = 
      let modifier = match s with
        | Neutral -> Fn.id
        | True -> math-color Colors.blue
        | False -> math-color (Colors.gray 0.7)
        | Conflict -> fun x -> math-color Colors.red ${\text!{\uwave{\skip(2pt);${#x}\skip(2pt);}}}
        | Deciding -> fun x -> ${#x^\mathrm{d}}
      in modifier (from-plain-lit i)
  let from-clause cs = 
        let body = Utils.concat-maths (List.intersperse ${,} (List.map from-lit cs))
         in ${(#body)}
  let from-cnf cs = Utils.concat-maths (
         List.intersperse (math-skip 2pt)
          (List.map from-clause cs)
        )
  let-math \cnf cs = from-cnf cs
  let pretty-clause cs = Utils.concat-maths 
        (List.intersperse ${\lor} 
          (List.map 
            (fun (Lit (_, i)) -> 
              (let sign = if i < 0 then ${\lnot} else ${}
                in let n = if i < 0 then -i else i
                in let idx = text-in-math MathOrd (fun ctx -> read-inline ctx ((embed-string (arabic n))))
                in ${#sign P_{#idx}}
              )
            ) 
            cs
          )
        )
  let pretty-cnf cs = Utils.concat-maths 
    (List.intersperse ${\land} 
      (List.map 
        (fun x -> (let b = pretty-clause x in ${\p{#b}})) cs
      )
    )
  let-math \pretty-cnf cs = pretty-cnf cs
  let rule m = Escape m
  let math-size sty sz m = 
    text-in-math sty 
    (fun ctx ->
      read-inline (ctx |> set-font-size (sz (get-font-size ctx)))
      {${#m}}
    )

  let-math \mathsize sty sz m = math-size sty sz m
  let from-stack cs = 
        Utils.concat-maths 
          (List.intersperse 
            (math-skip 1pt)
            (List.map 
              (fun l -> math-size MathOrd (fun l -> l *' 0.75) (from-lit l)) 
              cs
            )
          )
  let from-rule r = match r with
      | Decide i -> 
          let n = from-plain-lit i 
           in ${\mathop{\mathrm{Decide}}#n}
      | UnitProp i ->
          let n = from-plain-lit i 
            in ${\mathop{\mathrm{UnitProp}}#n}
      | Backjump -> ${\mathop{\mathrm{Backjump}}}
      | Backtrack -> ${\mathop{\mathrm{Backtrack}}}
      | Escape m -> m
  let from-some-rule r = match r with
      | None -> ${}
      | Some rule -> 
          let reason = from-rule rule 
          in let backsp r = text-in-math MathOrd 
              (fun ctx -> inline-skip (get-font-size ctx *' (0. -. r)))
          in let back1 = backsp 0.2
          in let back2 = backsp 0.5
          in ${\mathsize!(MathRel)!(fun p -> p *' 0.75){-#back1\p{#reason}#back2\longrightarrow}}
 
  let derivation-to-maths =
        Utils.concat-map
          (fun (r, l, stack) -> [ from-some-rule r; from-cnf l ; ${}; let s =  from-stack stack in ${\mid #s} ])
  let render-derivs start ds = 
        {\alignat(2)(derivation-to-maths ((None, start, []) :: List.map (fun (x,y,z) -> (Some x, y, z)) ds));}
  let-inline \derive start ds = render-derivs start ds
  let-block ctx +derive start ds = read-block ctx '<
    +alignat(2)(derivation-to-maths ((None, start, []) :: List.map (fun (x,y,z) -> (Some x, y, z)) ds));
    >
end
